public class Practice4 {
    public static void main(String[] args) {
        /* [ 대입 연산자 ]
        &= 왼쪽의 피연산자를 오른쪽의 피연산자와 비트 AND 연산한 후, 그 결과값을 왼쪽의 피연산자에 대입함.
           |= 왼쪽의 피연산자를 오른쪽의 피연산자와 비트 OR 연산한 후, 그 결과값을 왼쪽의 피연산자에 대입함.
           *= 왼쪽의 피연산자를 오른쪽의 피연산자와 비트 XOR 연산한 후 , 그 결과값을 왼쪽의 피연산자에 대입함.
           <<= 왼쪽의 피연산자를 오른쪽의 피연산자만큼 왼쪽 시프트한 후 , 그 결괏값을 왼쪽의 피연산자에 대입함.
           >>= 왼쪽의 피연산자를 오른쪽의 피연산자만큼 부호를 유지하며 오른쪽 시프트한 후 ,
           그 결괏값을 왼쪽의 피연산자에 대입함.
           >>>= 왼쪽의 피연산자를 오른쪽의 피연산자만큼 부호에 상관없이 오른쪽 시프트한 후 ,
           그 결괏값을 왼쪽의 피연산자에 대입함.
           [ 증감 연산자 ]
           ++X 먼저 피연산자의 값을 1 증가시킨 후에 해당 연산을 진행함
           x++ 먼저 해당 연산을 수행하고 나서, 피연산자의 값을 1 증가시킴
           EX) a++또는 ++a -->  a+=1 또는 a=a+1이다
           --X 먼저 피연산자의 값을 1 감소시킨 후에 해당 연산을 진행함.
           X-- 먼저 해당 연산을 수행하고 나서, 피연산자의 값을 1 감소시킴.
            [비교 연산자]
            == 왼쪽의 피연산자와 오른쪽의 피연산자가 같으면 참을 반환함.
            != 왼쪽의 피연산자와 오른쪽의 피연산자가 같지 않으면 참을 반환함.
            > 왼쪽의 피연산자가 오른족의 피연산자보다 크면 참을 반환함.
            >= 왼족의 피연산자가 오른쪽의 피연산자보다크거나 같으면 참을 반환함.
            < 왼쪽의 피연산자가 오른쪽의 피연산자보다 작으면 참을 반환함.
            <= 왼쪽의 피연산자가 오른쪽의 피연산자보다 작거나 같으면 참을 반환함.

            */
    int num1 = 7, num2 = 7;
    int result1, result2, result3;

    result1= --num1 + 4;
    result2 = num2-- +4;
    result3 = num2-- +4;

        System.out.println("전위 감소 연산자에 의한 결과 : "+result1);
        System.out.println("후위 감소 연산자에 의한 결과 : "+result2);
        System.out.println("후위 감소 연산자에 의한 결과 : "+result3);
    }
}
